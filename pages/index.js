import Head from 'next/head';
import {v4 as uuidv4} from "uuid";
import React,{useState,useContext,useEffect} from "react";

import RecipeList from './conponents/RecipeList';
import RecipeEdit from './conponents/RecipeEdit';

export const RecipeContext = React.createContext();

const LOCAL_STORAGE_KEY = 'recipes';

export default function Home() 
{
  
  const[recipes,setRecipes]=useState([]);
  const[selectedRecipeId,setSelectedRecipeId]=useState();

  useEffect(()=>
  {
    const recipesStorage= localStorage.getItem(LOCAL_STORAGE_KEY);
    if(recipesStorage!==null)
    {
      setRecipes(JSON.parse(recipesStorage))
    }
  },[])
  useEffect(()=>
  {
    localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(recipes))
  },[recipes])
  
  const foundRecipe = recipes.find(recipe=>recipe.id===selectedRecipeId);

  const contextValues=
  {
     deleteRecipe,
     findRecipeByid,
     updateRecipe
  }

  function createNewRecipe()
  {
    const newRecipe=
    {
      id:uuidv4(),
      name:'',
      servings:1,
      cookTime:'',
      instructions:'',
      ingredients:[
        {
          id:uuidv4(),
          name:'lol',
          amount:'44'
        }
      ]
    }
    
    setSelectedRecipeId(newRecipe.id)
    recipes ? setRecipes([...recipes,newRecipe]):setRecipes([newRecipe])
  }
  function deleteRecipe(id)
  {
    if(selectedRecipeId!==null && selectedRecipeId===id)setSelectedRecipeId(undefined)
    setRecipes(recipes.filter(recipe=>recipe.id!==id))
  }
  function findRecipeByid(id)
  {
     setSelectedRecipeId(id)
  }
  function updateRecipe(id,newRecipe)
  {
     const recipesDummy = [...recipes];
     const index = recipesDummy.findIndex(recipe=>recipe.id===id);
     recipesDummy[index]=newRecipe;
     setRecipes(recipesDummy);
  }

  return (
    <div>
      <Head>
        <title>Fancy Kitchen</title>
        <meta name="description" content="Generated by create next app" />
        <link
          href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,900;1,100&family=Manrope:wght@200;300;400;500;700;800&family=Silkscreen&display=swap"
          rel="stylesheet"
        ></link>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='main'>
        <RecipeContext.Provider value={contextValues}>
          <div className="recipes-block">
            <div className="recipes-container">
              {recipes && <RecipeList recipes={recipes} />}
              <button className='recipes-container__button' onClick={createNewRecipe}>add recipe</button>
            </div>
            {foundRecipe && <RecipeEdit foundRecipe={foundRecipe} />} 
          </div>
        </RecipeContext.Provider>
      </main>
    </div>
  );
}
